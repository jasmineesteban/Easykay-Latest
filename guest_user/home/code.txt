function drawPolyline(originMarker, destinationMarker){
    var jeepRoutePathCoordinates = [];
    var busRoutePathCoordinates = [];
    var polylineCoordinates = [];

    if(polyline){
        removePolyline();
    }
    
    if (originMarker && destinationMarker) {
        var jeepRoutes = <?php echo json_encode($routes); ?>;
        var busRoutes = <?php echo json_encode($busRoutes); ?>;

        var originLatLng = originMarker.getLatLng();
        var destinationLatLng = destinationMarker.getLatLng();
        
          // Find nearest coordinates to origin
        var nearestToOriginJeep = findNearestJeepCoordinates(originLatLng, jeepRoutes);
        var nearestToDestinationJeep = findNearestJeepCoordinates(destinationLatLng, jeepRoutes);
        var nearestToOriginBus = findNearestBusCoordinates(originLatLng, busRoutes);
        var nearestToDestinationBus = findNearestBusCoordinates(destinationLatLng, busRoutes);

        console.log(nearestToOriginJeep);
        console.log(nearestToOriginJeep);
        console.log(nearestToOriginBus);
        console.log(nearestToOriginBus);

        // jeeeeeeeeeeeeeeeeeeep
        if(nearestToOriginJeep && nearestToDestinationJeep){
            for (var i = 1; i < jeepRoutes.length; i++) {
                var route = jeepRoutes[i];
                if (route.latitude === nearestToOriginJeep.latitude && route.longitude === nearestToOriginJeep.longitude) {
                    jeepRoutePathCoordinates.push([route.latitude, route.longitude]);
                    for (var j = i + 1; j < jeepRoutes.length; j++) {
                        k=0;
                        var nextRoute = jeepRoutes[j];
                        jeepRoutePathCoordinates.push([nextRoute.latitude, nextRoute.longitude]);
                        console.log(jeepRoutePathCoordinates[k]);
                        k++;
                        if (nextRoute.latitude === nearestToDestinationJeep.latitude && nextRoute.longitude === nearestToDestinationJeep.longitude) {
                            break;}
                    }
                    break; 
                }
            }
// store in polyline array
            for (var k = 0; k < jeepRoutePathCoordinates.length; k++) {
                var routePath = jeepRoutePathCoordinates[k];
                polylineCoordinates.push([routePath[0], routePath[1]]); 
                console.log(polylineCoordinates[k]);
            }
            for (var l = 0; l < polylineCoordinates.length -1 ; l++) {
                var firstroute = polylineCoordinates[l];
                var nextroute = polylineCoordinates[l + 1];
                        
                var distance = L.latLng(firstroute[0], firstroute[1]).distanceTo(L.latLng(nextroute[0], nextroute[1]));

                totalJeepDistance += distance;

                polyline = L.polyline([
                    [firstroute[0], firstroute[1]],
                    [nextroute[0], nextroute[1]]
                ], { color: '#20A2AA', weight: 5 }).addTo(map);
            }

            console.log("Total distance of the route path:", totalJeepDistance, "meters");

            var originRoutingControl = L.Routing.control({
                waypoints: [
                    L.latLng([originLatLng.lat, originLatLng.lng]),
                    L.latLng([nearestToOriginJeep.latitude, nearestToOriginJeep.longitude])
                ],
                createMarker: function() { return null; },
                show: false,
                lineOptions: {
                styles: [{ color: '#20A2AA', weight: 5 }]
            }
            }).on('routeselected', function(e) {
                var route = e.route;
                originDistance = route.summary.totalDistance;
                var routeCoordinates = route.coordinates;
                var polyline = L.polyline(routeCoordinates, { color: '#20A2AA', weight: 5 }).addTo(map);
            });

            var destinationRoutingControl = L.Routing.control({
                waypoints: [
                    L.latLng([destinationLatLng.lat, destinationLatLng.lng]),
                    L.latLng([nearestToDestinationJeep.latitude, nearestToDestinationJeep.longitude])
                ],
                createMarker: function() { return null; },
                show: false,
                lineOptions: {
                styles: [{ color: '#20A2AA', weight: 5 }]
            }
            }).on('routeselected', function(e) {
                var route = e.route;
                destinationDistance = route.summary.totalDistance;
                var routeCoordinates = route.coordinates;
                var polyline = L.polyline(routeCoordinates, { color: '#20A2AA', weight: 5 }).addTo(map);
            });
            
            console.log('Origin(m)' + originDistance);
            console.log('Destination(m)' + destinationDistance);
            originRoutingControl.addTo(map);
            destinationRoutingControl.addTo(map);
        }
        else{
            console.log('No jeep route found');
        }

        // busssssssssssssssssssss
       
    }
}\



 var origlat = parseFloat(urljeeporigLatitude);
        var origlng = parseFloat(urljeeporigLongitude);
        var destinationlat = parseFloat(urljeepdestinationLatitude);
        var destinationlng = parseFloat(urljeepdestinationLongitude);

        console.log('origlat: ' + origlat);

        var originMarker = L.marker([origlat, origlng]).addTo(map);
        originCircle = L.circle([origlat, origlng], {
                        color: '#20A2AA',
                        fillColor: '#20A2AA',
                        fillOpacity: 0.5,
                        radius: 20
                    }).addTo(map);

                    originMarker.bindPopup('Your origin.').openPopup();

        destinationMarker = L.marker([destinationlat, destinationlng], {
                        icon: L.icon({
                            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                            iconSize: [25, 41],
                            iconAnchor: [12, 41],
                            popupAnchor: [1, -34],
                        })
                    }).addTo(map);
                    destinationCircle = L.circle([destinationlat, destinationlng], {
                        color: 'red',
                        fillColor: 'red',
                        fillOpacity: 0.5,
                        radius: 20
                    }).addTo(map);

                    destinationMarker.bindPopup('Your destination.').openPopup();

        drawPolyline(origlat, origlng, destinationlat, destinationlng);



        if(originLatLng && destinationLatLng){
    var jeepRoutes = <?php echo json_encode($routes); ?>;
    var busRoutes = <?php echo json_encode($busRoutes); ?>;
    var jeepOrig = false;
    var jeepDest = false;

    // checks if origin is in jeepRoutes or bus routes
    for(var j=1; j < jeepRoutes.length; j++){
        var route = jeepRoutes[j];
        if (route.latitude === originLatLng.Latitude && route.longitude === originLatLng.Longitude) {
            jeepOrig = true;
            break;  
        }
    }
    for(var j=1; j < jeepRoutes.length; j++){
        var route = jeepRoutes[j];
        if(route.latitude === destinationLatLng.latitude && route.longitude === destinationLatLng.longitude){
            jeepDest = true;
        }
    }
    
    //store jeep path
    if(jeepOrig && jeepDest){
        for(var i = 0; i < jeepRoutes; i++){
            var route = jeepRoutes[i];
            if (route.latitude === originLatLng.Latitude && route.longitude === originLatLng.Longitude) {
                jeepRoutePathCoordinates.push([route.latitude, route.longitude]);
                var k=0;
                for (var j = i + 1; j < jeepRoutes.length; j++) {
                    var nextRoute = jeepRoutes[j];
                    jeepRoutePathCoordinates.push([nextRoute.latitude, nextRoute.longitude]);
                    console.log(jeepRoutePathCoordinates[k]);
                    k++;
                    if(nextRoute.latitude === destinationLatLng.latitude && nextRoute.longitude === destinationLatLng.longitude) {
                        break;
                    }
                }
                break; 
            }
        }
        for (var k = 0; k < jeepRoutePathCoordinates.length; k++) {
            var routePath = jeepRoutePathCoordinates[k];
            polylineCoordinates.push([routePath[0], routePath[1]]); 
            console.log(polylineCoordinates[k]);
        }
    }

    for (var l = 0; l < polylineCoordinates.length -1 ; l++) {
        var firstroute = polylineCoordinates[l];
        var nextroute = polylineCoordinates[l + 1];
                    
        var distance = L.latLng(firstroute[0], firstroute[1]).distanceTo(L.latLng(nextroute[0], nextroute[1]));

        totalJeepDistance += distance;

        var polyline = L.polyline([
            [firstroute[0], firstroute[1]],
            [nextroute[0], nextroute[1]]
        ], { color: '#20A2AA', weight: 5 }).addTo(map);
    }
}
